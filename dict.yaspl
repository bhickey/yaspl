(module dict
  (import bool compare)
  (export singleton insert lookup)
  
  (data UnbalancedTree (v)
        (Leaf)
        (Branch Int v Tree Tree))

  (defn singleton (k v) (All (v) (Int -> v -> (UnbalancedTree v)))
     (Branch k v (Leaf) (Leaf)))

  (defn insert (t k v) (All (v) ((UnbalancedTree v) -> Int -> v -> (UnbalancedTree v)))
    (case t
      ((Leaf) -> (Branch k v (Leaf) (Leaf)))
      ((Branch k0 v0 l r) ->
        (case (compare k k0)
          ((EqualTo) -> (Branch k0 v0 (insert l k v) r))
          ((LessThan) -> (Branch k0 v0 (insert l k v) r))
          ((GreaterThan) -> (Branch k0 v0 l (insert r k v)))))))

  (defn lookup (t k d) (All (v) ((UnbalancedTree v) -> Int -> v))
    (case t
      ((Leaf) -> d)
      ((Branch k0 v0 l r) ->
        (case (compare k k0)
          ((EqualTo) -> v0)
          ((LessThan) -> (lookup l k d))
          ((GreaterThan) -> (lookup r k d))))))
)
