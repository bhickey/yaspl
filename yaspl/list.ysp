(module list
  (import bool)
  (export null cons List single reverse)

  (data List (t)
    (null)
    (cons t (List t)))

  (defn single (x) (All (a) (a -> (List a)))
    (cons x null))

  (defn reverse-inner (i acc)
    (All (a) ((List a) -> (List a) -> (List a)))
    (case i
      ((null) -> acc)
      ((cons e rest) -> (reverse-inner rest (cons e acc)))))

  (defn reverse (i)
    (All (a) ((List a) -> (List a)))
    (reverse-inner i null))

  (defn foldl (fn acc l)
    (All (a b) ((a -> b -> a) -> a -> (List b) -> a))
    (case l
      ((null) -> acc)
      ((cons e rest) -> (foldl fn (fn acc e) rest))))

  (defn foldr (fn acc l)
    (All (a b) ((a -> b -> b) -> b -> (List a) -> b))
    (case l
      ((null) -> acc)
      ((cons e rest) -> (fn e (foldr fn acc rest)))))

  (defn map (f l)
    (All (a b) ((a -> b) -> (List a) -> (List b)))
    (foldr
      (lambda (e acc)
        (cons (f e) acc))
      null l))

  (defn filter (f l)
    (All (a) ((a -> bool) -> (List a) -> (List a)))
    (foldr
      (lambda (e acc)
        (case (f e)
          ((True) -> (cons e acc))
          ((False) -> acc)))
        l null)))
