(module list
  (import bool pair maybe)
  (export null cons List single reverse)

  (data List (t)
    (null)
    (cons t (List t)))

  (defn single (x) (All (a) (a -> (List a)))
    (cons x null))

  (defn reverse-inner (i acc)
    (All (a) ((List a) -> (List a) -> (List a)))
    (case i
      ((null) -> acc)
      ((cons e rest) -> (reverse-inner rest (cons e acc)))))

  (defn reverse (i)
    (All (a) ((List a) -> (List a)))
    (reverse-inner i null))

  (defn foldl (fn acc l)
    (All (a b) ((a -> b -> a) -> a -> (List b) -> a))
    (case l
      ((null) -> acc)
      ((cons e rest) -> (foldl fn (fn acc e) rest))))

  (defn foldr (fn acc l)
    (All (a b) ((a -> b -> b) -> b -> (List a) -> b))
    (case l
      ((null) -> acc)
      ((cons e rest) -> (fn e (foldr fn acc rest)))))

  (defn build (next v)
    (All (a b) ((a -> (Maybe (Pair a b))) -> a -> (List b)))
    (case (next v)
      ((nothing) -> null)
      ((just e) ->
       (case e
         ((pair a b) -> (cons b (build next a)))))))

  (defn map (f l)
    (All (a b) ((a -> b) -> (List a) -> (List b)))
    (foldr
      (lambda (e acc)
        (cons (f e) acc))
      null l))

  (defn zipWith (f l1 l2)
    (All (a b c) ((a -> b -> c) -> (List a) -> (List b) -> (List c)))
    (build
      (lambda (e)
        (case e
          ((pair l1 l2) ->
           (case l1
             ((null) -> nothing)
             ((cons e1 r1) -> 
              (case l2 
                ((null) -> nothing)
                ((cons e2 r2) -> (just (pair (f e1 e2) (pair r1 r2))))))))))
      (pair l1 l2)))

  (defn filter (f l)
    (All (a) ((a -> bool) -> (List a) -> (List a)))
    (foldr
      (lambda (e acc)
        (case (f e)
          ((True) -> (cons e acc))
          ((False) -> acc)))
        l null)))
