(module queue
  (import bool list maybe pair)
  (export Queue push pop main)

  (data Queue (a)
    (queue (List a) (List a)))

  (defn push (a q)
    (All (a) (a -> (Queue a) -> (Queue a)))
    (case q
      ((queue r f) -> (queue r (cons a f)))))

  (defn pop (q)
    (All (a) ((Queue a) -> (Maybe (Pair (Queue a) a))))
    (case q
      ((queue r f) ->
       (case r
         ((null) ->
           (case (reverse f)
             ((null) -> nothing)
             ((cons x r) -> (just (pair (queue r null) x)))))
         ((cons x r) ->
           (just (pair (queue r f) x)))))))

  (defn main (arg)
    (All (a) (a -> (Maybe (Pair (Queue a) a))))
    (pop (push arg (push arg (queue null null)))))
)
